CPSC/ECE 3220 - Project 2 Assignment

  Late penalty:     10% off per day late, up to five days
  submission:       turn in your source file using handin.cs.clemson.edu
  Tools needed:     gcc, pthread library
  Concepts needed:  pthread locks and condition variables

  This is intended to be a two-person project, but you are allowed
  to do it individually.

Please carefully note the header comment expectations expressed at the bottom of the assignment.  These are mandatory.


GUIDELINES ON PREPARING THE PROGRAM

You may discuss the project requirements and the implementation with
only your teammate (if applicable) and me.

You should not send code to anyone or receive code from anyone, whether
by email, printed listings, photos, visual display on a workstation/
laptop/cell-phone/etc. screen, or any other method of communication.
Do not post the assignment, or a request for help, or your code on any
web sites. Do not ask tutors, friends, parents, etc. for help.

The key idea is that you shouldn't short-circuit the learning process
for others once you know the answer. (And you shouldn't burden anyone
else with inappropriate requests for code or "answers" and thus short-
circuit your own learning process.)

You can develop the program anywhere, but note that the program will
be tested (and thus must run) on one of the School of Computing's
Ubuntu 16.04 Linux systems.


GENERAL DESCRIPTION

You will use mutex locks and condition variables available in the
pthread library to provide the appropriate synchronization for a
program in C that implements resource allocation. The skeleton source
code for the program, "resource.c", can be found in the Canvas folders
for the course.

Do not add or change any code in the worker and observer functions.
These functions treat an instance of the resource_t data type as a
shared object, for which any necessary synchronization variables are
implemented as private members and any necessary synchronization
operations are implemented as part of the shared object methods.

The program must run on the School of Computing Linux servers. Compile
the program using a command line such as:

	gcc -Wall resource.c -pthread

You can use the helgrind synchronization checker using a command line
such as:

	valgrind --tool=helgrind ./a.out

Please see the course syllabus web page for links to pthread tutorials
and the helgrind manual.

The output should look something like the following. However, note that
each time you run the program you may see a slightly different order of
execution and a different mapping of resource id to thread id.

	-- resource table for type 1 --
	 resource #0: 0,-1
	 resource #1: 0,-1
	 resource #2: 0,-1
	 resource #3: 0,-1
	-------------------------------
	thread #0 uses resource #0
	thread #3 uses resource #2
	thread #2 uses resource #3
	thread #1 uses resource #1
	thread #4 uses resource #3
	thread #5 uses resource #0
	thread #6 uses resource #1
	thread #7 uses resource #2
	-- resource table for type 1 --
	 resource #0: 1,5
	 resource #1: 1,6
	 resource #2: 1,7
	 resource #3: 0,-1
	-------------------------------
	thread #9 uses resource #0
	thread #8 uses resource #2
	thread #10 uses resource #3
	thread #12 uses resource #1
	thread #11 uses resource #0
	thread #14 uses resource #1
	thread #13 uses resource #2
	thread #15 uses resource #3
	-- resource table for type 1 --
	 resource #0: 1,11
	 resource #1: 1,14
	 resource #2: 1,13
	 resource #3: 1,15
	-------------------------------
	thread #16 uses resource #0
	thread #17 uses resource #1
	thread #19 uses resource #2
	thread #18 uses resource #3
	-- resource table for type 1 --
	 resource #0: 0,-1
	 resource #1: 0,-1
	 resource #2: 0,-1
	 resource #3: 0,-1
	-------------------------------

When you run the program with helgrind, the last line printed should have
an error summary with zero errors, ignoring the count of suppressed errors.
E.g.,

	==5089== ERROR SUMMARY: 0 errors from 0 contexts (suppressed:
	 2165 from 180)

Include the following statements in your header comment:

// Programmer(s):  <put your name(s) here>
//
// In the design of this program, I/we have followed the five steps
//   listed in section 5.5.1 of the textbook.
//
// The structure of the program is consistent with the best practices
//   listed in section 5.5.2 of the textbook.
// - Accesses to resource state variables and synchronization variables
//   are only made in the shared object methods, and not in the code
//   that uses resource objects. Although the program is written in C,
//   the object-oriented interface is:
//   * Constructor method is resource_init().
//   * Destructor method is resource_reclaim().
//   * Public methods are resource_allocate(), resource_release(),
//     and resource_print().
// - A lock is used to synchronize all accesses to the state variables,
//   and a condition variable is used to cause threads to wait on
//   resource availability.
// - The lock is acquired at the beginning of methods and released
//   before returns.
// - The lock is held whenever a condition variable operation (wait or
//   signal) is called.
// - The wait operation on a condition variable is done inside a loop.
// - sleep() is not used in the object methods for synchronization.